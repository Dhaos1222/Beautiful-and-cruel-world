class Solution {
public:
    string longestPalindrome(string s) {
        int len = s.length();
        bool P[len+1][len+1] = {0};
        //memset(P,0,sizeof(P));
        int maxLen = 0;
        string ans;
        if(len<2)
        {
            return s;
        }
        //init
        for(int i = 1;i<len;i++)
        {
            if(s[i-1]==s[i])
            {
                P[i][i+1] = 1;
                if(maxLen==0)
                {
                    maxLen = 2;
                    ans = s.substr(i-1,maxLen);
                }
            }
            P[i][i] = 1;
        }
        P[len][len] = 1;
        if(maxLen==0)
        {
            maxLen = 1;
            ans = s.substr(len-1,1);
        }
        for(int j = 2;j<len;j++)
        {
            for(int r = 0;r+j<len;r++)
            {
                if(s[r]==s[r+j]&&P[r+2][r+j])
                {
                    P[r+1][r+j+1] = 1;
                    if(j+1>=maxLen)
                    {
                        maxLen = j+1;
                        ans = s.substr(r,maxLen);
                    }
                }
            }
        }
        return ans;
    }
};