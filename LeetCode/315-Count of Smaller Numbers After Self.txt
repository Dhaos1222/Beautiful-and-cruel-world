struct BSTNode
{
    int val;
    int count;
    BSTNode *left;
    BSTNode *right;
    BSTNode(int x):val(x),left(NULL),right(NULL),count(0){}
};
class Solution {
public:
    void BST_insert(BSTNode *node,BSTNode *insert_node,int &count_small)
    {
        if(insert_node->val<=node->val)
        {
            node->count++;//存储有多少小于node结点数量
            if(node->left)
            {
                BST_insert(node->left,insert_node,count_small);
            }
            else
            {
                node->left = insert_node;
            }
        }
        else
        {
            count_small += node->count+1;
            if(node->right)
            {
                BST_insert(node->right,insert_node,count_small);
            }
            else
            {
                node->right = insert_node;
            }
        }
    }
    vector<int> countSmaller(vector<int>& nums) {
        vector<BSTNode*>node_vec;
        for(int i = nums.size()-1;i>=0;i--)
        {
            node_vec.push_back(new BSTNode(nums[i]));
        }
        vector<int> count;
        count.push_back(0);
        for(int i = 1;i<nums.size();i++)
        {
            int count_small = 0;
            BST_insert(node_vec[0],node_vec[i],count_small);
            count.push_back(count_small);
        }
        vector<int> res;
        for(int i = nums.size()-1;i>=0;i--)
        {
            delete node_vec[i];
            res.push_back(count[i]);
        }
        return res;
    }
};