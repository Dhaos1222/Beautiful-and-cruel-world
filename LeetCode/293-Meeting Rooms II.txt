#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

struct interval
{
	int start;
	int end;
};

void mapSolve(vector<interval>& intervals)
{
	//map解决方法，起始时间+1，结束时间-1，遍历求和,和中的最大值即为结果
	map<int, int> m;
	vector<interval>::iterator it;
	for (it = intervals.begin(); it != intervals.end(); it++)
	{
		m[(*it).start] += 1;
		m[(*it).end] -= 1;
	}
	int res = 0;
	int room = 0;
	for (auto a : m)
	{
		res = max(res, room += a.second);
	}
	cout << res << endl;
}

bool cmp(const interval &a, const interval &b)
{
	return a.start < b.start;
}

void prioritySolve(vector<interval>& intervals)
{
	//优先队列（小根堆）解决方法，假设每个会议都要开一个会议室，故建立小根堆，将每个会议的结束时间进堆，后对会议的起始时间进行升序排序，遍历起始时间与堆顶比较，比堆顶大堆顶就pop一个，最后堆里剩下的元素即为结果
	priority_queue<int, vector<int>, greater<int>> qe;
	sort(intervals.begin(), intervals.end(), cmp);
	for (auto a : intervals)
	{
		if (!empty(qe) && a.start >= qe.top())qe.pop();
		qe.push(a.end);
	}
	cout << qe.size() << endl;
}

int main()
{
	vector<interval> intervals;
	interval temp;
	temp.start = 0;
	temp.end = 30;
	intervals.push_back(temp);
	temp.start = 5;
	temp.end = 10;
	intervals.push_back(temp);
	temp.start = 15;
	temp.end = 20;
	intervals.push_back(temp);

	//mapSolve(intervals);
	prioritySolve(intervals);


	system("pause");
	return 0;
}